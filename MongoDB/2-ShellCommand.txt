Download MongoShell :- https://www.mongodb.com/try/download/shell

Now Move all the executables like mongosh, place or move them to mongodb bin path, Because bin is accessible from anywhere, Because we have set path of it.

Now Start the server and Open another terminal to the same location where we use {cmd: mongod} command.

cmd: mongosh to open mongo-shell, Now its connected with local database of mongodb-compass

After Shell Started:
1. test> cmd: show dbs => to see what are the items we have in mongodb compass.

 // UI
 test> show dbs
 admin    40.00 KiB
 config  108.00 KiB
 local    72.00 KiB
 
2. test> cmd: use local => Move to local directory in the database.
 
 cmd:local> show collections 

 // UI
 startup_log

3. local> db.startup_log.find()

//It will show all the information inside the startup_log
 // UI
 [
  {
    _id: 'AcerSwift3-1696596902230',     
    hostname: 'AcerSwift3',
    startTime: ISODate("2023-10-06T12:55:02.000Z"),
    startTimeLocal: 'Fri Oct  6 18:25:02.230',
    cmdLine: {},
    pid: Long("4272"),
    buildinfo: {
      version: '7.0.1',
      gitVersion: '425a0454d12f2664f9e31002bbe4a386a25345b5',
      targetMinOS: 'Windows 7/Windows Server 2008 R2',
      modules: [],
      allocator: 'tcmalloc',
      javascriptEngine: 'mozjs',
      sysInfo: 'deprecated',
      versionArray: [ 7, 0, 1, 0 ],      
      openssl: { running: 'Windows SChannel' },
      buildEnvironment: {
        distmod: 'windows',
        distarch: 'x86_64',
        cc: 'cl: Microsoft (R) C/C++ Optimizing Compiler Version 19.31.31107 for x64',
        ccflags: '/nologo /WX /FImongo/platform/basic.h /fp:strict /EHsc /W3 /wd4068 /wd4244 /wd4267 /wd4290 /wd4351 /wd4355 /wd4373 /wd4800 /wd4251 /wd4291 /we4013 /we4099 /we4930 /errorReport:none /MD /O2 /Oy- /bigobj /utf-8 /permissive- /Zc:__cplusplus /Zc:sizedDealloc /volatile:iso /diagnostics:caret /std:c++20 /Gw /Gy /Zc:inline',
        cxx: 'cl: Microsoft (R) C/C++ Optimizing Compiler Version 19.31.31107 for x64',
        cxxflags: '/TP',
        linkflags: '/nologo /DEBUG /INCREMENTAL:NO /LARGEADDRESSAWARE /OPT:REF',  
        target_arch: 'x86_64',
        target_os: 'windows',
        cppdefines: 'SAFEINT_USE_INTRINSICS 0 PCRE2_STATIC NDEBUG BOOST_ALL_NO_LIB _UNICODE UNICODE _SILENCE_CXX17_ALLOCATOR_VOID_DEPRECATION_WARNING _SILENCE_CXX17_OLD_ALLOCATOR_MEMBERS_DEPRECATION_WARNING _SILENCE_CXX17_CODECVT_HEADER_DEPRECATION_WARNING _SILENCE_ALL_CXX20_DEPRECATION_WARNINGS _CONSOLE _CRT_SECURE_NO_WARNINGS _ENABLE_EXTENDED_ALIGNED_STORAGE _SCL_SECURE_NO_WARNINGS _WIN32_WINNT 0x0A00 BOOST_USE_WINAPI_VERSION 0x0A00 NTDDI_VERSION 0x0A000000 ABSL_FORCE_ALIGNED_ACCESS BOOST_ENABLE_ASSERT_DEBUG_HANDLER BOOST_FILESYSTEM_NO_CXX20_ATOMIC_REF BOOST_LOG_NO_SHORTHAND_NAMES BOOST_LOG_USE_NATIVE_SYSLOG BOOST_LOG_WITHOUT_THREAD_ATTR BOOST_MATH_NO_LONG_DOUBLE_MATH_FUNCTIONS BOOST_SYSTEM_NO_DEPRECATED BOOST_THREAD_USES_DATETIME BOOST_THREAD_VERSION 5'
      },
      bits: 64,
      debug: false,
      maxBsonObjectSize: 16777216,       
      storageEngines: [ 'devnull', 'wiredTiger' ]
    }
  }
]

4. local> use tutorial
//As we know we don't have database named tutorial
local> use tutorial
switched to db tutorial

//To create a new database with a document
5. tutorial> db.computers.insertOne({'title':'java'})

--------------------------------------------------------------------------------------------------------------------------------
//Create


//To insert one item in the document.
a. tutorial> db.computers.insertOne({"title":"Apple", "price": 100, "stock":3232, "description":"A Sweet red fruit"})

//To insert Many item in the document.
b. tutorial> db.computers.insertMany([{item1}, {item2}, {item3}])



-------------------------------------------------------------------------------------------------------------------------------
//Read


//To find a product in the document.
a. tutorial> db.computers.find() //Find all document
b. tutorial> db.computers.findOne({"id": 1}) //Find one document
c. tutorial> db.computers.find({"title": {$eq:"OPPOF19"}}) // eq stands for equal to.
d. tutorial> db.computers.find({"title": {$gt:"OPPOF19"}}) // gt stands for greater than.
e. tutorial> db.computers.find({"title": {$lt:"OPPOF19"}}) // lt stands for lower than.
f. tutorial> db.computers.find({"rating": {$gt:"4.1"}, "id"{$lt:"15"}}) // Here we use more than 1 parameter for searching items in document.
g. tutorial> db.computers.find({ $and: [{ rating: { $gt: 4.1 } }, { id: { $gt: 1 } }] })  // Here we use more than 1 parameter for searching items in document.
h. tutorial> db.computers.find({ $or: [{ rating: { $gt: 4.5 } }, { id: { $lt: 10 } }] })

//Below we are using cursor function. (sort) (filter)
i. tutorial> db.computers.find({$and:[{rating: {$gt:4.00}}, {id: {$lt:15}}]}).sort({"price":1})  //for sorting ascending use {1}  & descending {-1}
j. tutorial> db.computers.find({$and:[{rating: {$gt:4.00}}, {id: {$lt:15}}]}).sort({"price":1}).limit(2)  // It will find only 2 products which satisfies this condition,
k. tutorial> db.computers.find().sort({"price":1}).limit(2)  // It will find only 2 products in asc order set by price,
l. tutorial> db.computers.countDocuments(). //TO find number of documents in collection
m. tutorial> db.computers.countDocuments({price : {$gt : 600}}). //TO find number of documents in collection with curser function.
n. tutorial> db.computers.find({price: {$gt: 600}}, {title : 1 ,price : 1}). //TO show the name and price of the document items.
o. tutorial> db.computers.find({price: {$gt: 600}}, {title : 1 ,price : 1, "_id" : 0}). //TO show the name and price but hide the ID of the document items.


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//Update
a. tutorial> db.computers.updateOne({"id":1}, {$set:{"price":500}}) //To update one document price, by using their id. But be careful when we are doing update with specific field otherwise it will make new field. (Mostly Used)
b. tutorial> db.computers.updateOne({"id":31}, {$set:{"price":500}},{'upsert' : true}) //Suppose we have 30 document (in real) and we are thinking we have 31 document, So here we are thinking that update the price of product id of 31 to price-> 500 , But in real we don't have any product id of 31 , So it will create a new product of id 31 and set price 500, and suppose in real we have the 31 product then it will easily set the product price. (rarely used)
c. tutorial> db.computers.updateMany({"id":{$gt: 26}}, {$set:{"price":500}}) //(Dangerous)
c. tutorial> db.computers.replaceOne({"id":1}, {"price":500}) //(Dangerous, Because it will completely replace all the information with price.)

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//Delete
a. tutorial> db.computers.deleteOne({"id" : 1})//(Dangerous, Because it will completely replace all the information with price.)




5. tutorial> exit()

Helpful links: (Documentation)
-> https://www.mongodb.com/docs/manual/crud
